<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= chapter.title %> - <%= course.title %></title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-50">
    <div class="container mx-auto px-4 py-8">
        <!-- Breadcrumb -->
        <nav class="mb-6">
            <ol class="flex items-center space-x-2 text-sm text-gray-500">
                <li><a href="/course/<%= course.id %>" class="hover:text-blue-600">Course</a></li>
                <li class="flex items-center">
                    <svg class="h-4 w-4 mx-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                    </svg>
                    <span class="text-gray-700"><%= chapter.title %></span>
                </li>
            </ol>
        </nav>

        <!-- Chapter Header -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-6">
            <h1 class="text-3xl font-bold text-gray-800 mb-2"><%= chapter.title %></h1>
            <p class="text-gray-600 mb-4"><%= chapter.description %></p>
            <% if (role === 'educator') { %>
            <div class="mt-6 flex justify-end space-x-4">
                <a href="/course/<%= course.id %>/chapters/<%= chapter.id %>/edit" 
                   class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    <svg class="h-5 w-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                    </svg>
                    Edit Chapter
                </a>
                <button onclick="deleteChapter()" 
                        class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                    <svg class="h-5 w-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                    </svg>
                    Delete Chapter
                </button>
            </div>
            <% } %>
        </div>

        <!-- Pages Section -->
        <div class="bg-white rounded-lg shadow-md p-6">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-2xl font-semibold text-gray-800">Pages</h2>
                <% if (role === 'educator') { %>
                <a href="/course/<%= course.id %>/chapters/pages/new" 
                   class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition duration-150 ease-in-out">
                    Create New Page
                </a>
                <% } %>
            </div>

            <!-- First Page Display -->
            <div class="space-y-4">
                <% if (pages && pages.length > 0) { %>
                    <div class="border rounded-lg p-6 hover:bg-gray-50 transition duration-150 ease-in-out">
                        <h3 class="text-xl font-medium text-gray-800 mb-4"><%= pages[0].title %></h3>
                        <div class="prose max-w-none">
                            <%= pages[0].content %>
                        </div>
                    </div>
                <% } else { %>
                    <div class="text-center py-8">
                        <p class="text-gray-500">No pages created yet. Click the button above to create your first page.</p>
                    </div>
                <% } %>
            </div>
        </div>

        <!-- Navigation Section -->
        <div class="mt-8 bg-white rounded-lg shadow-md p-6">
            <div class="flex justify-between items-center">
                <!-- Previous Button -->
                <div>
                    <% if (currentPageIndex > 0) { %>
                        <a href="/course/<%= course.id %>/chapters/<%= chapter.id %>/pages/<%= pages[currentPageIndex - 1].id %>" 
                           class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                            <svg class="h-5 w-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
                            </svg>
                            Previous Page
                        </a>
                    <% } %>
                </div>

                <!-- Mark as Complete Button -->
                <div class="flex items-center space-x-4">
                    <% if (role !== 'educator' && pages && pages.length > 0) { %>
                    <button onclick="markAsComplete()" 
                            class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                        <svg class="h-5 w-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                        </svg>
                        Mark as Complete
                    </button>
                    <% } %>

                    <!-- Next Button -->
                    <% if (pages && pages.length > 1) { %>
                        <a href="/course/<%= course.id %>/chapters/<%= chapter.id %>/pages/<%= pages[1].id %>" 
                           class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                            Next Page
                            <svg class="h-5 w-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                            </svg>
                        </a>
                    <% } else if (nextChapterId) { %>
                        <!-- Next Chapter Button -->
                        <a href="/course/<%= course.id %>/chapters/<%= nextChapterId %>" 
                           class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                            Next Chapter
                            <svg class="h-5 w-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                            </svg>
                        </a>
                    <% } %>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Function to update button state based on completion status
        function updateButtonState(isCompleted) {
            const button = document.querySelector('button[onclick="markAsComplete()"]');
            if (isCompleted) {
                button.disabled = true;
                button.classList.add('opacity-50', 'cursor-not-allowed');
                button.classList.remove('bg-green-600', 'hover:bg-green-700');
                button.classList.add('bg-green-500');
                button.innerHTML = `
                    <svg class="h-5 w-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                    </svg>
                    Completed
                `;
            }
        }

        // Check completion status on page load
        window.addEventListener('load', () => {
            <% if (pages && pages.length > 0) { %>
            fetch('/course/<%= course.id %>/chapters/<%= chapter.id %>/status', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.completed) {
                    updateButtonState(true);
                }
            })
            .catch(error => console.error('Error checking completion status:', error));
            <% } %>
        });

        function markAsComplete() {
            <% if (pages && pages.length > 0) { %>
            const button = document.querySelector('button[onclick="markAsComplete()"]');
            const originalButtonContent = button.innerHTML;
            
            // Show loading state
            button.disabled = true;
            button.classList.add('opacity-50', 'cursor-not-allowed');
            button.innerHTML = `
                <svg class="animate-spin h-5 w-5 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Marking as Complete...
            `;

            fetch('/course/<%= course.id %>/chapters/<%= chapter.id %>/complete/<%= pages[currentPageIndex].id %>', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    updateButtonState(true);

                    // Show success notification
                    const notification = document.createElement('div');
                    notification.className = 'fixed bottom-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg transform transition-all duration-500 translate-y-0 opacity-100';
                    notification.innerHTML = `
                        <div class="flex items-center">
                            <svg class="h-5 w-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                            </svg>
                            <span>Chapter marked as complete!</span>
                        </div>
                    `;
                    document.body.appendChild(notification);

                    // Remove notification after 3 seconds
                    setTimeout(() => {
                        notification.classList.add('translate-y-2', 'opacity-0');
                        setTimeout(() => notification.remove(), 500);
                    }, 3000);
                } else {
                    throw new Error(data.message || 'Failed to mark chapter as complete');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                // Reset button state
                button.disabled = false;
                button.classList.remove('opacity-50', 'cursor-not-allowed');
                button.innerHTML = originalButtonContent;

                // Show error notification
                const notification = document.createElement('div');
                notification.className = 'fixed bottom-4 right-4 bg-red-500 text-white px-6 py-3 rounded-lg shadow-lg transform transition-all duration-500 translate-y-0 opacity-100';
                notification.innerHTML = `
                    <div class="flex items-center">
                        <svg class="h-5 w-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                        </svg>
                        <span>${error.message}</span>
                    </div>
                `;
                document.body.appendChild(notification);

                // Remove notification after 3 seconds
                setTimeout(() => {
                    notification.classList.add('translate-y-2', 'opacity-0');
                    setTimeout(() => notification.remove(), 500);
                }, 3000);
            });
            <% } %>
        }

        function deleteChapter() {
            if (confirm('Are you sure you want to delete this chapter? This will also delete all pages in this chapter. This action cannot be undone.')) {
                fetch('/course/<%= course.id %>/chapters/<%= chapter.id %>', {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        window.location.href = '/course/<%= course.id %>';
                    } else {
                        throw new Error(data.message || 'Failed to delete chapter');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert(error.message);
                });
            }
        }
    </script>
</body>
</html>
